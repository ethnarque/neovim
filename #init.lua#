require "neodev".setup()

local cmp = require 'cmp'

cmp.setup({
    completion = {
        autocomplete = false
    },
    snippet = {
        expand = function(args)
            require('luasnip').lsp_expand(args.body)
        end,
    },
    wind
    window = {
        -- completion = cmp.config.window.bordered(),
        -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
        ['<Tab>'] = cmp.mapping.select_next_item({ behavior = cmp.SelectBehavior.Insert }),
        ['<S-Tab>'] = cmp.mapping.select_prev_item({ behavior = cmp.SelectBehavior.Insert }),
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'luasnip' }, -- For luasnip users.
    }, {
        { name = 'buffer' },
    })
})

cmp.setup.cmdline({ "/", "?" }, {
    completion = {
        autocomplete = { "InsertEnter", 'TextChanged' }
    },
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = "buffer" }
    }
})

cmp.setup.cmdline(':', {
    completion = {
        autocomplete = { "InsertEnter", 'TextChanged' }
    },
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
        { name = 'path' }
    }, {
        { name = 'cmdline' }
    })
})



local function hsl_to_rgb(h, s, l)
    local r, g, b

    if s == 0 then
        r, g, b = l, l, l -- achromatic
    else
        local function hue_to_rgb(p, q, t)
            if t < 0 then t = t + 1 end
            if t > 1 then t = t - 1 end
            if t < 1 / 6 then return p + (q - p) * 6 * t end
            if t < 1 / 2 then return q end
            if t < 2 / 3 then return p + (q - p) * (2 / 3 - t) * 6 end
            return p
        end

        local q = l < 0.5 and l * (1 + s) or l + s - l * s
        local p = 2 * l - q
        r = hue_to_rgb(p, q, h + 1 / 3)
        g = hue_to_rgb(p, q, h)
        b = hue_to_rgb(p, q, h - 1 / 3)
    end

    return r * 255, g * 255, b * 255
end

local function rgb_to_hex(r, g, b)
    return string.format("#%02X%02X%02X", r, g, b)
end

local function hsl_to_hex(h, s, l)
    local r, g, b = hsl_to_rgb(h / 360, s / 100, l / 100)
    return rgb_to_hex(r, g, b)
end

local capabitilies = vim.lsp.protocol.make_client_capabilities()
local cmp_capabilities = require "cmp_nvim_lsp".default_capabilities()
capabitilies = vim.tbl_deep_extend("force", capabitilies, cmp_capabilities)

vim.api.nvim_create_autocmd("LspAttach", {
    callback = function(args)
        local client = vim.lsp.get_client_by_id(args.data.client_id)
        client.server_capabilities.semanticTokensProvider = nil
    end
})

local lspconfig = require "lspconfig"
lspconfig.lua_ls.setup {
    capabitilies = capabitilies
}
---@class MontesquieuColor
local colors = {
    dark  = {
        bg400 = hsl_to_hex(0, 0, 11),
        fg400 = hsl_to_hex(0, 0, 97)
    },
    light = {
        bg400 = hsl_to_hex(0, 0, 100),
        fg400 = hsl_to_hex(0, 0, 97)
    },
}

local function set_light_hl()
    local c = colors["light"]

    -- Normal text. *hl-Normal*
    vim.api.nvim_set_hl(0, "Normal", { bg = c.bg400 })
    -- Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
    vim.api.nvim_set_hl(0, "LineNr", { bg = "#feffff" })

    vim.api.nvim_set_hl(0, "Keyword", { fg = "#493a8a" })
    vim.api.nvim_set_hl(0, "Statement", { fg = "#493a8a" })
    vim.api.nvim_set_hl(0, "String", { fg = "#2f3f83" })
    vim.api.nvim_set_hl(0, "Number", { fg = hsl_to_hex(333, 73, 64) })
    vim.api.nvim_set_hl(0, "Boolean", { fg = hsl_to_hex(214, 74, 72) })
    vim.api.nvim_set_hl(0, "Float", { link = "Number" })
    vim.api.nvim_set_hl(0, "Special", { fg = "#cf7fa7" })
end

local function set_dark_hl()
    local c = colors["dark"]

    -- Normal text. *hl-Normal*
    vim.api.nvim_set_hl(0, "Normal", { fg = c.fg400, bg = c.bg400 })
    -- Normal text in floating windows. *hl-NormalFloat*
    vim.api.nvim_set_hl(0, "NormalFloat", { bg = hsl_to_hex(0, 0, 9) })
    -- FloatBorder	Border of floating windows. *hl-FloatBorder*
    vim.api.nvim_set_hl(0, "FloatBorder", { bg = "#feffff" })
    vim.api.nvim_set_hl(0, "LineNr", { bg = "#feffff" })
    -- FloatTitle	Title of floating windows. *hl-FloatTitle*
    -- NormalNC	Normal text in non-current windows. *hl-NormalNC*
    -- Popup menu: Normal item. *hl-Pmenu*
    vim.api.nvim_set_hl(0, "Pmenu", { bg = hsl_to_hex(0, 0, 9), fg = "gray" })
    -- Popup menu: Selected item. *hl-PmenuSel*
    vim.api.nvim_set_hl(0, "PmenuSel", { bg = hsl_to_hex(0, 0, 20), fg = "white" })
    -- PmenuKind	Popup menu: Normal item "kind". *hl-PmenuKind*
    -- PmenuKindSel	Popup menu: Selected item "kind". *hl-PmenuKindSel*
    -- PmenuExtra	Popup menu: Normal item "extra text". *hl-PmenuExtra*
    -- PmenuExtraSel	Popup menu: Selected item "extra text". *hl-PmenuExtraSel*
    -- Popup menu: Scrollbar. *hl-PmenuSbar*
    vim.api.nvim_set_hl(0, "PmenuSbar", { bg = hsl_to_hex(0, 0, 9) })
    -- PmenuThumb	Popup menu: Thumb of the scrollbar. *hl-PmenuThumb*
    vim.api.nvim_set_hl(0, "PmenuThumb", { bg = hsl_to_hex(0, 0, 80) })



    vim.api.nvim_set_hl(0, "Constant", { fg = hsl_to_hex(330, 46, 66) })
    vim.api.nvim_set_hl(0, "Comment", { fg = hsl_to_hex(360, 0, 50) })
    vim.api.nvim_set_hl(0, "Keyword", { fg = hsl_to_hex(233, 49, 71) })
    vim.api.nvim_set_hl(0, "Function", { fg = hsl_to_hex(330, 55, 75) })
    vim.api.nvim_set_hl(0, "Identifier", { fg = hsl_to_hex(201, 53, 74) })
    vim.api.nvim_set_hl(0, "Operator", { fg = "#ffffff" })
    vim.api.nvim_set_hl(0, "Statement", { link = "Keyword" })
    vim.api.nvim_set_hl(0, "String", { fg = hsl_to_hex(194, 29, 61) })
    vim.api.nvim_set_hl(0, "Number", { fg = hsl_to_hex(0, 0, 90) })
    vim.api.nvim_set_hl(0, "Boolean", { link = "Number" })
    vim.api.nvim_set_hl(0, "Float", { link = "Number" })
    vim.api.nvim_set_hl(0, "Type", { fg = hsl_to_hex(42, 99, 62) })
    --- Treesitter
    vim.api.nvim_set_hl(0, "@keyword.import", { fg = hsl_to_hex(330, 46, 66) })
    vim.api.nvim_set_hl(0, "@variable.member", { fg = hsl_to_hex(200, 53, 78) })
    vim.api.nvim_set_hl(0, "@punctuation.delimiter", { fg = hsl_to_hex(0, 0, 60) })
    vim.api.nvim_set_hl(0, "@punctuation.bracket", { fg = hsl_to_hex(0, 0, 75) })

    --- Editor
    -- ColorColumn	Used for the columns set with 'colorcolumn'. *hl-ColorColumn*
    -- Conceal		Placeholder characters substituted for concealed text (see 'conceallevel') *hl-Conceal*.
    -- CurSearch	Used for highlighting a search pattern under the cursor (see 'hlsearch') *hl-CurSearch*.
    -- Cursor		Character under the cursor. *hl-Cursor*
    -- lCursor		Character under the cursor when |language-mapping| is used (see 'guicursor'). *hl-lCursor*
    -- CursorIM	Like Cursor, but used when in IME mode. *CursorIM* *hl-CursorIM*
    -- CursorColumn	Screen-column at the cursor, when 'cursorcolumn' is set. *hl-CursorColumn*
    -- Screen-line at the cursor, when 'cursorline' is set. Low-priority if foreground (ctermfg OR guifg) is not set. *hl-CursorLine*
    vim.api.nvim_set_hl(0, "CursorLine", { bg = hsl_to_hex(0, 0, 16) })

    --
    -- Directory	Directory names (and other special names in listings). *hl-Directory*
    -- DiffAdd		Diff mode: Added line. |diff.txt| *hl-DiffAdd*
    -- DiffChange	Diff mode: Changed line. |diff.txt| *hl-DiffChange*
    -- DiffDelete	Diff mode: Deleted line. |diff.txt| *hl-DiffDelete*
    -- DiffText	Diff mode: Changed text within a changed line. |diff.txt| *hl-DiffText*
    -- EndOfBuffer	Filler lines (~) after the end of the buffer. By default, this is highlighted like |hl-NonText|. *hl-EndOfBuffer*
    -- TermCursor	Cursor in a focused terminal. *hl-TermCursor*
    -- TermCursorNC	Cursor in an unfocused terminal. *hl-TermCursorNC*
    -- ErrorMsg	Error messages on the command line. *hl-ErrorMsg*
    -- Separators between window splits. *hl-WinSeparator*
    vim.api.nvim_set_hl(0, "WinSeparator", { fg = hsl_to_hex(0, 0, 24) })
    -- Folded		Line used for closed folds. *hl-Folded*
    -- FoldColumn	'foldcolumn' *hl-FoldColumn*
    -- Column where |signs| are displayed. *hl-SignColumn*
    vim.api.nvim_set_hl(0, "SignColumn", { link = "Normal" })
    -- IncSearch	'incsearch' highlighting; also used for the text replaced with ":s///c". *hl-IncSearch*
    -- Substitute	|:substitute| replacement text highlighting. *hl-Substitute*
    -- Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set. *hl-LineNr*
    vim.api.nvim_set_hl(0, "LineNr", { bg = hsl_to_hex(0, 0, 12), fg = hsl_to_hex(0, 0, 46) })
    -- LineNrAbove	Line number for when the 'relativenumber' option is set, above the cursor line. *hl-LineNrAbove*
    -- LineNrBelow	Line number for when the 'relativenumber' option is set, below the cursor line. *hl-LineNrBelow*
    -- Like LineNr when 'cursorline' is set and 'cursorlineopt' contains "number" or is "both", for the cursor line. *hl-CursorLineNr*
    vim.api.nvim_set_hl(0, "CursorLineNr", { fg = "white" })
    -- CursorLineFold	Like FoldColumn when 'cursorline' is set for the cursor line. *hl-CursorLineFold*
    -- Like SignColumn when 'cursorline' is set for the cursor line. *hl-CursorLineSign*
    vim.api.nvim_set_hl(0, "CursorLineSign", { link = "SignColumn" })
    -- MatchParen	Character under the cursor or just before it, if it is a paired bracket, and its match. |pi_paren.txt| *hl-MatchParen*
    -- ModeMsg		'showmode' message (e.g., "-- INSERT --"). *hl-ModeMsg*
    -- MsgArea		Area for messages and cmdline. *hl-MsgArea*
    -- MsgSeparator	Separator for scrolled messages |msgsep|. *hl-MsgSeparator*
    -- MoreMsg		|more-prompt| *hl-MoreMsg*
    -- '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line). See also |hl-EndOfBuffer|. *hl-NonText*
    vim.api.nvim_set_hl(0, "NonText", { fg = hsl_to_hex(0, 0, 25) })
end

set_light_hl()


-- 							*hl-Question*
-- Question	|hit-enter| prompt and yes/no questions.
-- 							*hl-QuickFixLine*
-- QuickFixLine	Current |quickfix| item in the quickfix window. Combined with
--                 |hl-CursorLine| when the cursor is there.
-- 							*hl-Search*
-- Search		Last search pattern highlighting (see 'hlsearch').
-- 		Also used for similar items that need to stand out.
-- 							*hl-SpecialKey*
-- SpecialKey	Unprintable characters: Text displayed differently from what
-- 		it really is. But not 'listchars' whitespace. |hl-Whitespace|
-- 							*hl-SpellBad*
-- SpellBad	Word that is not recognized by the spellchecker. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellCap*
-- SpellCap	Word that should start with a capital. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellLocal*
-- SpellLocal	Word that is recognized by the spellchecker as one that is
-- 		used in another region. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellRare*
-- SpellRare	Word that is recognized by the spellchecker as one that is
-- 		hardly ever used. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-StatusLine*
-- StatusLine	Status line of current window.
-- 							*hl-StatusLineNC*
-- StatusLineNC	Status lines of not-current windows.
-- 		Note: If this is equal to "StatusLine", Vim will use "^^^" in
-- 		the status line of the current window.
-- 							*hl-TabLine*
-- TabLine		Tab pages line, not active tab page label.
-- 							*hl-TabLineFill*
-- TabLineFill	Tab pages line, where there are no labels.
-- 							*hl-TabLineSel*
-- TabLineSel	Tab pages line, active tab page label.
-- 							*hl-Title*
-- Title		Titles for output from ":set all", ":autocmd" etc.
-- 							*hl-Visual*
-- Visual		Visual mode selection.
-- 							*hl-VisualNOS*
-- VisualNOS	Visual mode selection when vim is "Not Owning the Selection".
-- 							*hl-WarningMsg*
-- WarningMsg	Warning messages.
-- 							*hl-Whitespace*
-- Whitespace	"nbsp", "space", "tab", "multispace", "lead" and "trail"
-- 		in 'listchars'.
-- 							*hl-WildMenu*
-- WildMenu	Current match in 'wildmenu' completion.
-- 							*hl-WinBar*
-- WinBar		Window bar of current window.
-- 							*hl-WinBarNC*
-- WinBarNC	Window bar of not-current windows.
--
-- 					*hl-User1* *hl-User1..9* *hl-User9*
-- The 'statusline' syntax allows the use of 9 different highlights in the
-- statusline and ruler (via 'rulerformat').  The names are User1 to User9.
--
-- For the GUI you can use the following groups to set the colors for the menu,
-- scrollbars and tooltips.  They don't have defaults.  This doesn't work for the
-- Win32 GUI.  Only three highlight arguments have any effect here: font, guibg,
-- and guifg.
--
-- 							*hl-Menu*
-- Menu		Current font, background and foreground colors of the menus.
-- 		Also used for the toolbar.
-- 		Applicable highlight arguments: font, guibg, guifg.
--
-- 							*hl-Scrollbar*
-- Scrollbar	Current background and foreground of the main window's
-- 		scrollbars.
-- 		Applicable highlight arguments: guibg, guifg.
--
-- 							*hl-Tooltip*
-- Tooltip		Current font, background and foreground of the tooltips.
-- 		Applicable highlight arguments: font, guibg, guifg.
-- end
--
--
--
--
-- --- Editor
-- 							*hl-Normal*
-- Normal		Normal text.
-- 							*hl-NormalFloat*
-- NormalFloat	Normal text in floating windows.
-- 							*hl-FloatBorder*
-- FloatBorder	Border of floating windows.
-- 							*hl-FloatTitle*
-- FloatTitle	Title of floating windows.
-- 							*hl-NormalNC*
-- NormalNC	Normal text in non-current windows.
-- 							*hl-Pmenu*
-- Pmenu		Popup menu: Normal item.
-- 							*hl-PmenuSel*
-- PmenuSel	Popup menu: Selected item.
-- 							*hl-PmenuKind*
-- PmenuKind	Popup menu: Normal item "kind".
-- 							*hl-PmenuKindSel*
-- PmenuKindSel	Popup menu: Selected item "kind".
-- 							*hl-PmenuExtra*
-- PmenuExtra	Popup menu: Normal item "extra text".
-- 							*hl-PmenuExtraSel*
-- PmenuExtraSel	Popup menu: Selected item "extra text".
-- 							*hl-PmenuSbar*
-- PmenuSbar	Popup menu: Scrollbar.
-- 							*hl-PmenuThumb*
-- PmenuThumb	Popup menu: Thumb of the scrollbar.
-- 							*hl-Question*
-- Question	|hit-enter| prompt and yes/no questions.
-- 							*hl-QuickFixLine*
-- QuickFixLine	Current |quickfix| item in the quickfix window. Combined with
--                 |hl-CursorLine| when the cursor is there.
-- 							*hl-Search*
-- Search		Last search pattern highlighting (see 'hlsearch').
-- 		Also used for similar items that need to stand out.
-- 							*hl-SpecialKey*
-- SpecialKey	Unprintable characters: Text displayed differently from what
-- 		it really is. But not 'listchars' whitespace. |hl-Whitespace|
-- 							*hl-SpellBad*
-- SpellBad	Word that is not recognized by the spellchecker. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellCap*
-- SpellCap	Word that should start with a capital. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellLocal*
-- SpellLocal	Word that is recognized by the spellchecker as one that is
-- 		used in another region. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-SpellRare*
-- SpellRare	Word that is recognized by the spellchecker as one that is
-- 		hardly ever used. |spell|
-- 		Combined with the highlighting used otherwise.
-- 							*hl-StatusLine*
-- StatusLine	Status line of current window.
-- 							*hl-StatusLineNC*
-- StatusLineNC	Status lines of not-current windows.
-- 		Note: If this is equal to "StatusLine", Vim will use "^^^" in
-- 		the status line of the current window.
-- 							*hl-TabLine*
-- TabLine		Tab pages line, not active tab page label.
-- 							*hl-TabLineFill*
-- TabLineFill	Tab pages line, where there are no labels.
-- 							*hl-TabLineSel*
-- TabLineSel	Tab pages line, active tab page label.
-- 							*hl-Title*
-- Title		Titles for output from ":set all", ":autocmd" etc.
-- 							*hl-Visual*
-- Visual		Visual mode selection.
-- 							*hl-VisualNOS*
-- VisualNOS	Visual mode selection when vim is "Not Owning the Selection".
-- 							*hl-WarningMsg*
-- WarningMsg	Warning messages.
-- 							*hl-Whitespace*
-- Whitespace	"nbsp", "space", "tab", "multispace", "lead" and "trail"
-- 		in 'listchars'.
-- 							*hl-WildMenu*
-- WildMenu	Current match in 'wildmenu' completion.
-- 							*hl-WinBar*
-- WinBar		Window bar of current window.
-- 							*hl-WinBarNC*
-- WinBarNC	Window bar of not-current windows.
